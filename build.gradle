plugins {
    id "java"
    id "signing"
    id "maven-publish"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id 'com.diffplug.spotless' version '5.14.0'
    id 'org.barfuin.gradle.jacocolog' version '2.0.0'
}

group = 'io.gitcoins'
version = '1.20.15'
description = 'Stream Chat official Java SDK'

// configure all java components to be published
publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withJavadocJar()
    withSourcesJar()
}

// For signing you need to make signingKey and signingPassword available properties
// See https://docs.gradle.org/current/userguide/signing_plugin.html
// The following makes the key available via the Gradle Property signingKey
// export ORG_GRADLE_PROJECT_signingKey=`cat test-private.pgp`
// export ORG_GRADLE_PROJECT_signingPassword="password"
// After making the Gradle properties above available, you can try signing using
// ./gradlew signMavenPublication
//
signing {
    def signingKey = System.getenv('ORG_GRADLE_PROJECT_signingKey')
    def signingPassword = System.getenv('ORG_GRADLE_PROJECT_signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

// https://docs.gradle.org/current/userguide/maven_plugin.html#sec:maven_pom_generation
project.plugins.withType(MavenPublishPlugin).all {
        PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
        publishing.publications.withType(MavenPublication).all { mavenPublication ->
                mavenPublication.pom {
                        name = "${project.group}:${project.name}"
                        description = name
                        url = "https://github.com/rwinch/gradle-publish-ossrh-sample"
                        licenses {
                                license {
                                        name = "The Apache License, Version 2.0"
                                        url = "https://www.apache.org/licenses/LICENSE-2.0"
                                }
                        }
                        developers {
                                developer {
                                        id = "rwinch"
                                        name = "Rob Winch"
                                        email = "rwinch@noreply.github.com"
                                }
                        }
                        scm {
                                connection = "scm:git:https://github.com/rwinch/gradle-publish-ossrh-sample"
                                developerConnection = "scm:git:ssh://github.com/rwinch/gradle-publish-ossrh-sample.git"
                                url = "https://github.com/rwinch/gradle-publish-ossrh-sample"
                        }
                }
        }
}


// The following makes the key available for publishing to Nexus
// export ORG_GRADLE_PROJECT_sonatypeUsername=${token name}
// export ORG_GRADLE_PROJECT_sonatypePassword=${token password}
// After making the Gradle properties above available, you can try publish using
// ./gradlew publishToSonatype
// ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository

nexusPublishing {
    repositories {
        //sonatype()
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            packageGroup = "io.gitcoins"
            stagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID')
            username =  System.getenv('ORG_GRADLE_PROJECT_sonatypeUsername')
            password =  System.getenv('ORG_GRADLE_PROJECT_sonatypePassword')
        }
    }

    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

// configure publishing to a local directory for testing (not necessary)
// ./gradlew publishMavenToLocal
// tree ./build/repos/releases
publishing {
        repositories {
                maven {
                        name = "local"

                        def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
                        def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
                        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                }
        }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url uri('https://repo.maven.apache.org/maven2/') }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'com.github.TheBestOrNothing:stream-chat-java:1.20.13'
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.11.0"))

    // define any required OkHttp artifacts without version
    implementation("com.squareup.okhttp3:okhttp")

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'com.intellij:annotations:12.0'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.apache.commons:commons-lang3:3.12.0'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}

test {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
        events 'standard_out', 'standard_error', "passed", "skipped", "failed"
    }

    doFirst {
        // Inject local properties into tests runtime system properties
        localProperties.forEach((k, v) -> {
            systemProperty k.toString(), v.toString()
        })
    }

    finalizedBy jacocoTestReport
}

def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}
spotless {
    java {
        googleJavaFormat()
    }
}

jacocoTestReport {
    dependsOn test
}

task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties
